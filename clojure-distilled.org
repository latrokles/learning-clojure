#+STARTUP: indent

* [[https://yogthos.net/ClojureDistilled.html][Clojure Distilled]]
:PROPERTIES:
:header-args: clojure :results output value pp
:END:

** the core
*** data types
- vars: mutable storage location, can be rebound per-thread
- booleans: true and false, nil values are falsey
- numbers: ints, floats, doubles, fractions
- symbols: variable identifiers
- keywords: like ruby :symbols
- chars: what they sound like, but represented differently. e.g. \a
- regexes: strings that start with a hash

Also a literal notation for collections

- list: '(1 2 3)
- vector: [1 2 3]
- map: {:foo "a" :bar "b"}
- set: #{"a" "b" "c"}

clojure programming is a lot about manipulating data structures, even
the logic uses data structures. code == data (homoiconicity I think this is called?)

*** special forms
primitives that define the language, in clojure this is a small set (I believe the
rest is done using macros and composing s forms).

** functions
*** function calls
- function call are lists containing function name and params, like so:

#+BEGIN_SRC clojure
(list 1 2 3)
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 |

*** anonymous functions (lambdas)
- anonymous functions are functions not bound to a name (lambdas), they are defined the keyword /fn/
#+begin_src clojure 
((fn [arg] (println arg)) "hello")
#+end_src

#+RESULTS:
: hello
: nil

- there is a shorthand for lambdas, prepending the definition with a /#/
#+begin_src clojure
;; for a single argument
#(println %)

;; or for multiple arguments
#(println %1 %2 %3)
#+end_src

#+RESULTS:
: #function[user/eval5792/fn--5795]

*** named functions
- a named function is an /fn/ bound to a symbol

#+begin_src clojure
(def double
  (fn [x] (* 2 x)))

(double 4)
#+end_src

#+RESULTS:
: 8

- there is a shorthand for this as well, the /defn/
#+begin_src clojure
(defn square [x] (* x x))

(square 2)
#+end_src

#+RESULTS:
: 4

- expressions are evaluated inside out
- the return value of a function is the result of evaluating the last expression in the function
- the clojure compiler is a single pass compiler, so functions must be defined before they are called.

#+begin_src clojure
(plusOne 1)

(defn plusOne [x] (+ 1 x))
#+end_src

#+RESULTS:
: class clojure.lang.Compiler$CompilerExceptionclass clojure.lang.Compiler$CompilerExceptionSyntax error compiling at (*cider-repl learning/learning-clojure:localhost:52784(clj)*:1:28).
: Unable to resolve symbol: plusOne in this context

- but you can provide a forward declaration (like in C) using the /declare/ macro
#+begin_src clojure
(declare plusOne)

(defn plusTwo [x] (plusOne (plusOne x)))

(plusTwo 1)
#+end_src

#+RESULTS:
: class java.lang.IllegalStateExceptionclass java.lang.IllegalStateExceptionExecution error (IllegalStateException) at user/eval5819$plusTwo (REPL:3).
: Attempting to call unbound fn: #'user/plusOne

#+begin_src clojure
(declare plusOne)

(plusOne 1)

(defn plusOne [x] (+ 1 x))
#+end_src

#+RESULTS:
: class java.lang.IllegalStateExceptionclass java.lang.IllegalStateExceptionExecution error (IllegalStateException) at user/eval5815 (REPL:3).
: Attempting to call unbound fn: #'user/plusOne

- as we see above, doesn't seem to work that well on the repl though.

- function structure is the language AST (is it really?), which is why some of the more dynamic properties of the language are relatively easier.



*** higher order functions
- functions can take other functions as parameters
#+begin_src clojure
;; map is the quintisenial example of this, it takes two arguments:
;; 1. a function 
;; 2. a colection of elements on which the funtion is applied
;; 
;; and returns a collection resulting from applying the function to the elements of the collection passed in
;;
;; * the lambda below multiplies its argument with itself
(map #(* % %) [1 2 3 4 5])

#+end_src

#+RESULTS:
: (1 4 9 16 25)

- we can even nest/chain them together
#+begin_src clojure
(filter even?
  (map #(* 3 %) [1 2 3 4 5]))
#+end_src

#+RESULTS:
: (6 12)

*** closures
- functions that return other functions as their result
  [isn't this just higher order functions, isn't the notion of a closure more involved than that
   in that the main idea is that the returned function carries a bound context with it]
  
#+begin_src clojure
(defn greeting [greeting-message]
  (fn [guest-name]
    (println greeting-message guest-name)))

(let [greet (greeting "Welcome to Clojure")]
  (greet "Gumersindo")
  (greet "Kiko"))
#+end_src

#+RESULTS:
: Welcome to Clojure Gumersindo
: Welcome to Clojure Kiko
: nil

- /let/ is used above to bind the function returned by greeting to the symbol /greet/, similar to
  variable declaration in imperative languages (...?)

*** threading [weaving] expressions

- clojure provides a more conveninent way to handle nested expressions so they don't become too difficult to read

#+begin_src clojure
(reduce + (interpose 5 (map inc (range 10))))

;; can be re-written as
(->> (range 10) (map inc) (interpose 5) (reduce +))
#+end_src

#+RESULTS:
: 100

- the /->>/ operator passes the result of each expression as the last argument of the next
- the /->/ operator passes the result of each expression as the first argument of the next
  
*** laziness
- clojure uses laziness quite a bit [I thought it was only in sequences...]

** code structure 
- immutability preferred, enforced for the most part
- chain functions together (either through nesting or using /->/)
- functions return values, do not mutate state (unless it's made explicit?)

*** destructuring
- a declarative way to access values in data structures

#+begin_src clojure
(defn print-user [[name address phone]]
  (println name "-" address phone))
  
;; the values of the list passed into print-user are automatically
;; assigned to the destructuring symbols in the fn definition
(print-user ["bob" "some address" "some phone"])
#+end_src

#+RESULTS:
: bob - some address some phone
: nil

- can also specify them variable arguments as a sequence
#+begin_src clojure
(defn print-args [& args]
  (println args))

(print-args "a" "b" "c")
#+end_src

#+RESULTS:
: (a b c)
: nil

#+begin_src clojure
(defn print-args [arg1 & [arg2]]
  (println
    (if arg2
      "got two arguments"
      "got one argument")))

(print-args "bar" "baz")
(print-args "bar")
#+end_src

#+RESULTS:
: got two arguments
: got one argument
: nil

- can also destructure maps, where the local binding names point to the map keys
#+begin_src clojure
(let [{[a b c] :items id :id} {:id "foo" :items [1 2 3]}]
  (println id "->" a b c))
#+end_src

#+RESULTS:
: foo -> 1 2 3
: nil

- the above destructuring is very common, so again, we get some convenience operations to do it
  in a simpler way

#+begin_src clojure
(defn login [{:keys [user pass]}]
  (and (= user "bob") (= pass "secret")))

(login {:user "bob" :pass "secret"})
#+end_src

#+RESULTS:
: true

*** namespaces
- group functionality in namespaces

- defining a namespaces with /(ns <name>)/ at the top of file. then go on to define functions for namespace.
- a namespace can be referenced in two different ways: /:use/ and /:require/
  
#+begin_src clojure
(ns my-namespace
  (:use another-namespace))
#+end_src
- brings in all the definitions from /another-namespace/ into /my-namespace/, this could cause collisions

#+begin_src clojure
(ns my-namespace
  (:use [another-namespace :only [fun1 fun2]]))
#+end_src
- brings only the specified definitions from /another-namespace/ to /my-namespace/

- the other approach is to use /:require/
#+begin_src clojure
(ns my-namespace (:require other-ns))

(other-ns/fn1 ...)
#+end_src
- more explicit than /:use/
- we can rename the namespace we are referencing. helpful if namespace names are too long.

#+begin_src clojure
(ns my-ns
  (:require [other-ns :as ons]))

(ons/fn1 ...)
#+end_src

- and there is still a shorthand to bring specific definitions
#+begin_src clojure
;; can use :all to bring everything in
(ns my-ns
  (:require [ons :refer [fn1]))
#+end_src

*** dynamic variables
- mechanism to declare variables that can have value changed in a defined scope
#+begin_src clojure
(declare ^{:dynamic true} *foo*)
(println *foo*)
#+end_src

#+RESULTS:
: #object[clojure.lang.Var$Unbound 0x7fe4229b Unbound: #'user/*foo*]
: nil

- the above declares /*foo*/ as a dynamic var that is not bound to any value.
#+begin_src clojure
(declare ^{:dynamic true} *foo*)

(defn with-foo [f]
  (binding [*foo* "I exist"]
    (f)))

(with-foo #(println *foo*))
#+end_src

#+RESULTS:
: I exist
: nil

- dynamic variables are discouraged, but the functionality is there and can be useful
  for dealing with filestreams, db connections... we will see..
  
** polymorphism
*** multimethods
- dispatching mechanism that uses a selector function.
#+begin_src clojure
(defmulti area :shape)

(defmethod area :circle [{:keys [radius]}]
  (* Math/PI radius radius))

(defmethod area :rectangle [{:keys [length width]}]
  (* length width))

(defmethod area :default [shape]
  (throw (Exception. (str "unrecognized shape: " shape))))
  

(area {:shape :circle :radius 10})
(area {:shape :rectangle :length 4 :width 4})
#+end_src

#+RESULTS:
: 16

*** protocols
- define abstract set of functions to be implemented by a type

#+begin_src clojure
(defprotocol Foo
  "Foo docstring"
  (bar [this b] "bar docstring")
  (baz [this] [this b] "baz docstring"))

(deftype Bar [data] Foo
  (bar [this param]
    (println data param))
  (baz [this]
    (println (class this)))
  (baz [this param]
    (println param)))

(let [b (Bar. "some data")]
  (.bar b "param")
  (.baz b)
  (.baz b "baz w/ a parameter"))
#+end_src

#+RESULTS:
: class clojure.lang.Compiler$CompilerExceptionclass clojure.lang.Compiler$CompilerExceptionSyntax error (NullPointerException) compiling deftype* at (*cider-repl learning/learning-clojure:localhost:51231(clj)*:6:1).
: null

** dealing with global state
- clojure allows for mutable shared state via STM (software transactional memory).
- two types of mutable types, /atom/ for uncoordinated upates and /ref/ for doing multiple updates as a transaction.

#+begin_src clojure
;; create an atom and set it to nil
(def global-val (atom nil))

;; read the value with deref
(println "value of global-val is:" (deref global-val))

;; shorthand for deref is @
(println "value of global-val is:" @global-val)
#+end_src

#+RESULTS:
: value of global-val is: nil
: value of global-val is: nil
: nil

- we can set the value of an atom with /reset!/ or /swap!/
- the ! at the end of the function is a convention to denote that these functions modify mutable data (very ruby of clojure)
#+begin_src clojure
;; with reset! we pass the new value
(reset! global-val 10)
(println @global-val)

;; with swap! we provide a function that will be used to update the atom's value
(swap! global-val inc)
(println @global-val)
#+end_src

#+RESULTS:
: 10
: 11
: nil

- refs are defined in a similar fashion, but used much differently
#+begin_src clojure
;; define our ref
(def names (ref []))

;; open a transaction and perform multiple updates
(dosync
  (ref-set names ["john"])
  (alter names #(if (not-empty %)
                  (conj % "Jane") %)))

(println names)
#+end_src

#+RESULTS:
: #ref[{:status :ready, :val [john Jane]} 0x303ad898]
: nil

- the empty check inside the transaction above will depend on any updates up to that point within
- the transaction. any updates outside of this transaction won't have an effect in here.
- in a collistion, one of those transactions would be retried.
** writing code that writes code... macros!
- clojure has a macro system
- code as data...
- macros execute before evaluation
- macros can be difficult to reason about, avoid them unless necessary
  
#+begin_src clojure
(def session (atom {:user "bob"}))

(defn load-content []
  (if (:user @session)
    "Welcome back!"
    "please log back in!"))
#+end_src

#+RESULTS:
: #'user/load-content

or we can do this
#+begin_src clojure
(defmacro defprivate [name args & body]
  `(defn ~(symbol name) ~args
     (if (:user @session)
       (do ~@body)
       "please login")))
       

;; the ` passes the list as data and not executable code
;; the ~@ notation is called unquote splicing
(macroexpand-1 '(defprivate foo [greeting] (println greeting)))
#+end_src

#+RESULTS:
: (clojure.core/defn
:  foo
:  [greeting]
:  (if (:user @user/session) (do (println greeting)) "please login"))

+ found this coverage of macros too contrived for a complex subject, a simpler example could've gone a long way

** the REPL (read-eval-print-loop)
interactive development, not much about the repl here. the Rich Hickey videos cover this

** calling java code
*** importing a class
- use /:import/
#+begin_src clojure
(ns my-ns
  (:import java.io.File))
#+end_src

or

#+begin_src clojure
(ns my-ns
  (:import [java.io File FileInputStream FileOutputStream]))
#+end_src

*** instatiate a class
#+begin_src clojure
(new File ".")

;; or the shorthand
(File. ".")
#+end_src

*** calling methods
#+begin_src clojure

;; the . preceding the method name and then the instance after
(let [f (File. ".")]
  (println (.getAbsolutePath f)))
  
;; for static methods
(str File/separator "foo" File/separator "bar")

;; or
(Math/sqrt 256)
#+end_src

#+RESULTS:
: /Users/latrokles/src/github.com/latrokles/learning/learning-clojure/.
: 16.0

- and, oh surprise, there is a shorthand for chaining methods
#+begin_src clojure
(.getBytes (.getAbsolutepath (File. ".")))

;; can be re-written as
(.. (File. ".") getAbsolutepath getBytes)
#+end_src
